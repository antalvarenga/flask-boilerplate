#  Template python-build

#  This template allows you to validate your python code.
#  The workflow allows running tests and code linting on the default branch.

image: antalvarenga/python-poetry:latest

pipelines:
  # pull-requests:
  #   '**':
  branches:
    development:
      - step:
          name: Install dependencies
          caches:
            - venv
          artifacts:
            - .venv/**
          script:
            - poetry install
      - parallel:
        - step:
            name: Test
            script:
              - poetry run pytest -v --cov
            services:
              - postgres
        - step:
            name: Lint
            caches:
              - pre-commit
            script:
              - poetry run pre-commit install --install-hooks
              - poetry run pre-commit run --all-files
            after-script:
              - cat /root/.cache/pre-commit/pre-commit.log

  # branches:
  #   master:
  #     - step:
  #         name: Build & push app
  #         # trigger: manual  # Uncomment to make this a manual deployment.
  #         script:
  #           - docker build -t antalvarenga/poetry-flask .
  #           - echo DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
  #           - echo DOCKERHUB_PASSWORD=${DOCKERHUB_PASSWORD}
  #           - echo ${DOCKERHUB_PASSWORD} | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
  #           - docker push antalvarenga/poetry-flask:latest
  #         services:
  #           - docker
  #         caches:
  #           - docker
  #         condition:
  #           changesets:
  #             includePaths:
  #               - "app/**"
  #               - "poetry.lock"
  #               - "pyproject.toml"
  #               - "Dockerfile"
  #               - "bitbucket-pipelines.yml"
  #     - step:
  #         name: Build & push nginx
  #         script:
  #           - docker build -f nginx.Dockerfile -t antalvarenga/nginx .
  #           - echo DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
  #           - echo DOCKERHUB_PASSWORD=${DOCKERHUB_PASSWORD}
  #           - echo ${DOCKERHUB_PASSWORD} | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
  #           - docker push antalvarenga/nginx:latest
  #         services:
  #           - docker
  #         caches:
  #           - docker
  #         condition:
  #           changesets:
  #             includePaths:
  #               - "nginx.Dockerfile"
  #               - "nginx/nginx_default.conf"
  #               - "bitbucket-pipelines.yml"
  #     - step:
  #         name: Copy docker-compose file to remote
  #         # trigger: manual  # Uncomment to make this a manual deployment.
  #         script:
  #           - pipe: atlassian/scp-deploy:1.2.1
  #             variables:
  #               USER: 'root'
  #               SERVER: '46.101.106.188'
  #               REMOTE_PATH: '/'
  #               LOCAL_PATH: '${BITBUCKET_CLONE_DIR}/docker-compose.yml'
  #         condition:
  #           changesets:
  #             includePaths:
  #               - "docker-compose.yml"
  #               - "bitbucket-pipelines.yml"

  #     - step:
  #         name: Deploy to development
  #         deployment: Test
  #         script:
  #           - pipe: atlassian/ssh-run:0.4.1
  #             variables:
  #               SSH_USER: 'root'
  #               SERVER: '46.101.106.188'
  #               COMMAND: 'docker compose pull && docker compose -p flask-app up --force-recreate -d && docker image prune -f'
  #         condition:
  #           changesets:
  #             includePaths:
  #               - "app/**"
  #               - "poetry.lock"
  #               - "pyproject.toml"
  #               - "Dockerfile"
  #               - "docker-compose.yml"
  #               - "nginx.Dockerfile"
  #               - "config/nginx_default.conf"
  #               - "bitbucket-pipelines.yml"
      # - step:
      #     name: Deploy to development
      #     deployment: Test
      #     script:
      #       - unset DOCKER_HOST
      #       - docker -v
      #       - docker compose --help
      #       - docker context create remote --docker "host=ssh://root@46.101.106.188"
      #       - docker context ls
      #       - docker context use remote
      #       - docker --context remote -p flask-app compose up -d --remove-orphans

definitions:
  services:
    postgres:
      image: bitnami/postgresql:13-debian-11
      variables:
        POSTGRESQL_DATABASE: 'flask_app_test'
        POSTGRESQL_USERNAME: 'flask_app_root'
        POSTGRES_PASSWORD: '123456'
        POSTGRESQL_POSTGRES_PASSWORD: '123456'
  caches:
    venv: .venv
    pre-commit: $HOME/.cache/pre-commit
